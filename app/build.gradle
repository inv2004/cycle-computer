import java.text.SimpleDateFormat

def gitSha() {
    return "git --git-dir=${rootDir}/.git --work-tree=${rootDir} rev-parse --short HEAD".execute().text.trim()
}

def buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def gitCount() {
    return "git --git-dir=${rootDir}/.git --work-tree=${rootDir} rev-list HEAD --first-parent --count".execute().text.trim()
}

def gitTag() {
    return "git --git-dir=${rootDir}/.git --work-tree=${rootDir} describe --tags --abbrev=0".execute().text.trim()
}

def getAutoVersionName() {
    return this.hasProperty("publish") ? "${gitTag()}" : "${gitCount()}-${gitSha()}-${buildTime()}"
}

def getAutoVersionCode() {
    return gitCount().toInteger()
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.example.unknoqn.cc"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode getAutoVersionCode()
        versionName getAutoVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        setProperty("archivesBaseName", "CycleComputer-$versionName")
    }
    buildTypes {
        dev {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig getSigningConfig()
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig getSigningConfig()
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->\
                output.outputFile = new File(output.outputFile.parent, "cycle-computer-"+variant.buildType.name+"-${getAutoVersionName()}.apk");
                println "\nAPK: ${output.outputFile}";
                println "\nVersion: ${getAutoVersionName()} (${getAutoVersionCode()})";
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile files('libs/antpluginlib_3-5-0.jar')
    compile files('libs/fit.jar')
//    compile 'com.github.danshannon:javastrava-api:1.0.3'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:support-vector-drawable:25.3.1'
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'
    compile 'com.sweetzpot.stravazpot:lib:1.2'
    compile 'com.google.android.gms:play-services-maps:11.0.2'
    testCompile 'junit:junit:4.12'
}
